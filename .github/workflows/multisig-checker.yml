name: Monitor Safe Multisigs

on:
  schedule:
    - cron: "0/10 * * * *"
  workflow_dispatch:

# Add concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  TELEGRAM_BOT_TOKEN_AAVE: ${{ secrets.TELEGRAM_BOT_TOKEN_AAVE }}
  TELEGRAM_CHAT_ID_AAVE: ${{ secrets.TELEGRAM_CHAT_ID_AAVE }}
  TELEGRAM_BOT_TOKEN_COMP: ${{ secrets.TELEGRAM_BOT_TOKEN_COMP }}
  TELEGRAM_CHAT_ID_COMP: ${{ secrets.TELEGRAM_CHAT_ID_COMP }}
  TELEGRAM_BOT_TOKEN_LIDO: ${{ secrets.TELEGRAM_BOT_TOKEN_LIDO }}
  TELEGRAM_CHAT_ID_LIDO: ${{ secrets.TELEGRAM_CHAT_ID_LIDO }}
  TELEGRAM_BOT_TOKEN_SILO: ${{ secrets.TELEGRAM_BOT_TOKEN_SILO }}
  TELEGRAM_CHAT_ID_SILO: ${{ secrets.TELEGRAM_CHAT_ID_SILO }}
  TELEGRAM_BOT_TOKEN_STARGATE: ${{ secrets.TELEGRAM_BOT_TOKEN_STARGATE }}
  TELEGRAM_CHAT_ID_STARGATE: ${{ secrets.TELEGRAM_CHAT_ID_STARGATE }}
  TELEGRAM_BOT_TOKEN_SPARK: ${{ secrets.TELEGRAM_BOT_TOKEN_SPARK }}
  TELEGRAM_CHAT_ID_SPARK: ${{ secrets.TELEGRAM_CHAT_ID_SPARK }}
  TELEGRAM_BOT_TOKEN_PENDLE: ${{ secrets.TELEGRAM_BOT_TOKEN_PENDLE }}
  TELEGRAM_CHAT_ID_PENDLE: ${{ secrets.TELEGRAM_CHAT_ID_PENDLE }}
  TELEGRAM_BOT_TOKEN_EULER: ${{ secrets.TELEGRAM_BOT_TOKEN_EULER }}
  TELEGRAM_CHAT_ID_EULER: ${{ secrets.TELEGRAM_CHAT_ID_EULER }}
  TELEGRAM_CHAT_ID_USD0: ${{ secrets.TELEGRAM_CHAT_ID_USD0 }}
  TELEGRAM_CHAT_ID_MOONWELL: ${{ secrets.TELEGRAM_CHAT_ID_MOONWELL }}
  PROVIDER_URL_MAINNET: ${{ secrets.PROVIDER_URL_MAINNET }}
  PROVIDER_URL_ARBITRUM: ${{ secrets.PROVIDER_URL_ARBITRUM }}
  TELEGRAM_BOT_TOKEN_DEFAULT: ${{ secrets.TELEGRAM_BOT_TOKEN_DEFAULT }}

jobs:
  multisig_checker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      # restore file from cache
      - name: Get nonces.txt from cache
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: nonces.txt
          key: nonces-v3-${{ hashFiles('nonces.txt') }}
          restore-keys: |
            nonces-v3-${{ runner.os }}-

      # Get initial hash
      - name: Get initial hash
        id: initial-hash
        run: echo "hash=${{ hashFiles('nonces.txt') }}" >> $GITHUB_OUTPUT

      - name: Run Safe script
        run: uv run safe/main.py

      # Check final hash
      - name: Check final hash
        id: final-hash
        run: echo "hash=${{ hashFiles('nonces.txt') }}" >> $GITHUB_OUTPUT

      # save file to cache only if hash changed
      - name: Cache nonces.txt
        if: always() && steps.initial-hash.outputs.hash != steps.final-hash.outputs.hash
        id: cache-save
        uses: actions/cache/save@v4
        with:
          path: nonces.txt
          key: nonces-v3-${{ hashFiles('nonces.txt') }}
