name: Monitoring Scripts

on:
  schedule:
    - cron: "0 * * * *"
  workflow_dispatch:

env:
  PROVIDER_URL: ${{ secrets.PROVIDER_URL }}
  PROVIDER_URL_OPTIMISM: ${{ secrets.PROVIDER_URL_OPTIMISM }}
  PROVIDER_URL_MAINNET: ${{ secrets.PROVIDER_URL_MAINNET }}
  PROVIDER_URL_ARBITRUM: ${{ secrets.PROVIDER_URL_ARBITRUM }}
  PROVIDER_URL_BASE: ${{ secrets.PROVIDER_URL_BASE }}
  TELEGRAM_BOT_TOKEN_AAVE: ${{ secrets.TELEGRAM_BOT_TOKEN_AAVE }}
  TELEGRAM_CHAT_ID_AAVE: ${{ secrets.TELEGRAM_CHAT_ID_AAVE }}
  TELEGRAM_BOT_TOKEN_COMP: ${{ secrets.TELEGRAM_BOT_TOKEN_COMP }}
  TELEGRAM_CHAT_ID_COMP: ${{ secrets.TELEGRAM_CHAT_ID_COMP }}
  TELEGRAM_BOT_TOKEN_LIDO: ${{ secrets.TELEGRAM_BOT_TOKEN_LIDO }}
  TELEGRAM_CHAT_ID_LIDO: ${{ secrets.TELEGRAM_CHAT_ID_LIDO }}
  TELEGRAM_BOT_TOKEN_SILO: ${{ secrets.TELEGRAM_BOT_TOKEN_SILO }}
  TELEGRAM_CHAT_ID_SILO: ${{ secrets.TELEGRAM_CHAT_ID_SILO }}
  TELEGRAM_BOT_TOKEN_STARGATE: ${{ secrets.TELEGRAM_BOT_TOKEN_STARGATE }}
  TELEGRAM_CHAT_ID_STARGATE: ${{ secrets.TELEGRAM_CHAT_ID_STARGATE }}
  TELEGRAM_BOT_TOKEN_SPARK: ${{ secrets.TELEGRAM_BOT_TOKEN_SPARK }}
  TELEGRAM_CHAT_ID_SPARK: ${{ secrets.TELEGRAM_CHAT_ID_SPARK }}
  TELEGRAM_BOT_TOKEN_PENDLE: ${{ secrets.TELEGRAM_BOT_TOKEN_PENDLE }}
  TELEGRAM_CHAT_ID_PENDLE: ${{ secrets.TELEGRAM_CHAT_ID_PENDLE }}
  TELEGRAM_BOT_TOKEN_PEGS: ${{ secrets.TELEGRAM_BOT_TOKEN_PEGS }}
  TELEGRAM_CHAT_ID_PEGS: ${{ secrets.TELEGRAM_CHAT_ID_PEGS }}
  TELEGRAM_CHAT_ID_MORPHO: ${{ secrets.TELEGRAM_CHAT_ID_MORPHO }}
  TELEGRAM_BOT_TOKEN_DEFAULT: ${{ secrets.TELEGRAM_BOT_TOKEN_DEFAULT }}
  GRAPH_API_KEY: ${{ secrets.GRAPH_API_KEY }}
  ETHERSCAN_TOKEN: ${{ secrets.ETHERSCAN_TOKEN }}
  POLYGONSCAN_TOKEN: ${{ secrets.POLYGONSCAN_TOKEN }}
  OPTIMISMSCAN_TOKEN: ${{ secrets.OPTIMISMSCAN_TOKEN }}
  ARBISCAN_TOKEN: ${{ secrets.ARBISCAN_TOKEN }}

jobs:
  my_job:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip" # caching pip dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # restore file from cache
      - name: Get Phrase cache file
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: cache-id.txt
          key: cache-id-v1-${{ runner.os }}-${{ hashFiles('cache-id.txt') }}
          restore-keys: |
            cache-id-v1-${{ runner.os }}-

      - name: Run Aave script
        run: python -m aave.main
      - name: Run Aave Proposals script
        run: python -m aave.proposals
      - name: Run Spark script
        run: python -m spark.main
      - name: Run Compound script
        run: python -m compound.main
      - name: Run Compound Proposals script
        run: python -m compound.proposals
      - name: Run Lido Matic script
        run: python -m lido.stmatic.main
      - name: Run Lido Ethereum script
        run: python -m lido.steth.main
      # - name: Run Stargate script
      #   run: python -m stargate.main
      - name: Run Silo Utilization script
        run: python -m silo.ur_sniff
      # - name: Run Silo Bad Debt script
      #   run: python -m silo.main
      - name: Run Pendle price script
        run: python -m pendle.main
      - name: Run LRT Peg Checker Balancer
        run: python -m lrt-pegs.balancer.main
      - name: Run Morpho Monitoring script
        run: python -m morpho.main
      - name: Run Morpho Bad Debt script
        run: python -m morpho.bad_debt

      # save file to cache
      - name: Cache cache-id.txt
        if: always()
        id: cache-save
        uses: actions/cache/save@v4
        with:
          path: cache-id.txt
          key: cache-id-v1-${{ runner.os }}-${{ hashFiles('cache-id.txt') }}
